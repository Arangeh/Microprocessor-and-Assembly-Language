/*
 * AssemblerHW3Q5.asm
 *
 *  Created: 3/23/2019 7:28:22 PM
 *   Author: Alireza
 */ 

 
 .def FINAL_STATUS = R0
 .def STATUS = R16
 .def LOOPCNT = R17
 .def TEMP = R19
 .def CHAR_PREV = R20
 .def CHAR_NEXT = R21	 
 ;.def ADRL=R21
 ;.def ADRH=R22
 ;.def LOW=R23
 ;.def HIGH=R24 
RESET:
 CLR LOOPCNT 
 ;THE FOLLOWING ARRAY IS ASCENDING
 ;ARRAY: .DB "ABCDEFGHIJKLMNOPQRSU"
 ;THE FOLLIWING ARRAY IS DESCENDING
 ARRAY: .DB "TSRQPONMLKJIHGFEDCBA"
 ;THE FOLLOWING ARRAY IS NEITHER ASCENDING NOR DESCENDING
 ;ARRAY: .DB "TRSQPONMLKJIHGFEDCBA"
 
 SER TEMP;
 ;OUT DDRB, TEMP
 CLR STATUS	
 JMP MAIN

MAIN: 

 LDI ZH, HIGH(ARRAY)
 LDI ZL, LOW(ARRAY)
 ADIW Z, 1;NOW Z POINTS TO THE FIRST MEANINGFUL ELEMENT OF THE ARRAY, WHICH IS THE FIRST CHARACTER
 
 LDI STATUS, 0X01;WE ASSUME IT'S ASCENDING AT THE FIRST GLANCE

 LPM CHAR_PREV, Z
 CALL DETERMINE_SEQ_ASCENDING
 
 LDI ZH, HIGH(ARRAY)
 LDI ZL, LOW(ARRAY)
 
 ADIW Z,1;NOW Z POINTS TO THE FIRST MEANINGFUL ELEMENT OF THE ARRAY, WHICH IS THE FIRST CHARACTER
 
  
 CLR LOOPCNT
 LPM CHAR_PREV, Z
 //OUT PORTB, STATUS
 CPI STATUS, 0X01
 BREQ LOOP

 CALL DETERMINE_SEQ_DESCENDING
 ;IF IT WAS NEITHER ASCENDING NOR DESCENDING, THEN IT SHOULD BE CONSIDRED UNSORTED
 
 JMP LOOP

DETERMINE_SEQ_ASCENDING:
 ;READ NEXT BYTE FOR CHECKING
 ADIW Z, 1
 LPM CHAR_NEXT, Z
 CP CHAR_NEXT, CHAR_PREV
 BRGE CHECK1
 LDI STATUS, 0X02;IT'S NOT ASCENDING. NOW WE ASSUME THAT IT'S DESCENDING
 JMP AFTER1
CHECK1: 		 	
 INC LOOPCNT
 MOV CHAR_PREV, CHAR_NEXT
 CPI LOOPCNT, 19
 BRNE DETERMINE_SEQ_ASCENDING	 
AFTER1:
 RET

DETERMINE_SEQ_DESCENDING:
 ;READ NEXT BYTE FOR CHECKING
 ADIW Z, 1
 LPM CHAR_NEXT, Z
 CP CHAR_PREV, CHAR_NEXT
 //OUT PORTB, STATUS
 BRGE CHECK2
 //OUT PORTB, STATUS NEVER EXECUTED
 LDI STATUS, 0X00;IT'S NOT ASCENDING NOR DESCENDING. SATUS SHOULD HAVE A VALUE OF 0
 JMP AFTER2
CHECK2: 		 	
 //OUT PORTB, STATUS	
 INC LOOPCNT
 MOV CHAR_PREV, CHAR_NEXT
 ;OUT PORTB, STATUS
 CPI LOOPCNT, 19
 BRNE DETERMINE_SEQ_DESCENDING	 
AFTER2:
  
 RET


LOOP:
 MOV FINAL_STATUS, STATUS
 OUT PORTB, FINAL_STATUS 
 JMP LOOPEND
LOOPEND:
 
 JMP LOOPEND